import {
  Grid,
  List,
  Typography,
  ListItem,
  Stack,
  Divider,
  Slider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Fab,
} from "@mui/material";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import WetherCard from "../components/Card/WeatherCard";
import DaysCard from "../components/Card/DaysCard";
import { useRecoilState, useRecoilValue } from "recoil";
import weatherAtom from "../recoil/atoms/wetherAtom";
import weatherSelector from "../recoil/selectors/weatherSelector";
import { useEffect, useState } from "react";
import {
  getWeatherToday,
  getWeatherFiveDays,
  getWeatherTodayCountry,
  getWeatherTodayPosition,
} from "../api/services/weather";
import fiveDaysWeatherAtom from "../recoil/atoms/wetherAtomFiveDays";
import AccessTimeFilledIcon from "@mui/icons-material/AccessTimeFilled";
import timeAtom from "../recoil/atoms/timeAtom";
import UseSwitchesCustom from "../components/Switch/Switch";
import MUISwitch from "../components/Switch/Switch";
import degreeAtom from "../recoil/atoms/degreeAtom";
import GMap from "../components/Map/GoogleMap";
import positionAtom from "../recoil/atoms/positionAtom";
import countries from "../public/assets/data/countries.json";
import icons from "../public/assets/data/icons.json";
import countryAtom from "../recoil/atoms/countryAtom";
import LocationOnIcon from "@mui/icons-material/LocationOn";

export default function Home() {
  const [weather, setWeather] = useRecoilState(weatherAtom);
  const [fiveWeather, setFiveWeather] = useRecoilState(fiveDaysWeatherAtom);
  const [time, setTime] = useRecoilState(timeAtom);
  const [country, setCountry] = useRecoilState(countryAtom);
  const [position, setPosition] = useRecoilState(positionAtom);
  const wetherToDay = useRecoilValue(weatherSelector);

  var options = {
    enableHighAccuracy: true,
    timeout: 5000,
    maximumAge: 0,
  };

  function success(pos) {
    var crd = pos.coords;

    console.log("Votre position actuelle est :");
    console.log(`Latitude : ${crd.latitude}`);
    console.log(`Longitude : ${crd.longitude}`);
    setPosition({ lat: crd.latitude, lng: crd.longitude });
  }

  function error(err) {
    console.warn(`ERREUR (${err.code}): ${err.message}`);
  }
  useEffect(() => {
    getWeatherToday().then((data) => {
      setWeather(data);
    });
    getWeatherFiveDays().then((data) => {
      console.log(data);
      setFiveWeather(data.list);
    });

    navigator.geolocation.getCurrentPosition(success, error, options);
  }, []);

  const [check, setCheck] = useRecoilState(degreeAtom);

  const handleChange = (event) => {
    setCheck(event.target.checked);
  };
  const handleChangeCountry = (event) => {
    setCountry(event.target.value);
    getWeatherTodayCountry(event.target.value).then((data) => {
      setWeather(data);
    });
  };
  const handlePosition = () => {
    getWeatherTodayPosition(position).then((data) => {
      setWeather(data);
    });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Meteo DZ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <img
        className={styles.bg}
        alt="background"
        src={`/assets/images/${
          icons.filter(
            (el) =>
              el.night === weather.weather[0].icon ||
              el.day === weather.weather[0].icon
          )[0].image
        }`}
        // layout="fill"
      />

      <div className={styles.image}></div>

      <Grid container className={styles.main}>
        <Grid item xs={12} sm={12} md={12} className={styles.line}>
          <Grid container>
            <Grid item xs={3} sm={3} md={3}>
              <Typography variant="h4">
                {new Date(Date.now())
                  .toJSON()
                  .slice(0, 10)
                  .replace(/-/g, " / ")
                  .split(" / ")
                  .reverse()
                  .join(" / ")}
              </Typography>
            </Grid>
            <Grid item xs={6} sm={6} md={6} style={{ marginRight: "10px" }}>
              <FormControl fullWidth>
                <InputLabel id="demo-simple-select-label">Age</InputLabel>
                <Select
                  labelId="demo-simple-select-label"
                  id="demo-simple-select"
                  value={country}
                  label="Country"
                  onChange={handleChangeCountry}
                >
                  {countries.map((cou, index) => (
                    <MenuItem key={index} value={cou.capital}>
                      {cou.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={1} sm={1} md={1}>
              <Fab color="primary" onClick={handlePosition} aria-label="add">
                <LocationOnIcon />
              </Fab>
            </Grid>
            <Grid item xs={1} sm={1} md={1}>
              <MUISwitch
                checked={check}
                onChange={handleChange}
                inputProps={{ "aria-label": "controlled" }}
              />
            </Grid>
          </Grid>
        </Grid>

        <Grid item xs={12} sm={12} md={12} className={styles.line}>
          <Grid container>
            <Grid item xs={12} sm={12} md={4} className={styles.map}>
              <GMap
                isMarkerShown
                googleMapURL="https://maps.googleapis.com/maps/api/js?key=AIzaSyBNZwuJ7Cvr7ccbkgkSHrRSbFR-PYJkfgY&v=3.exp&libraries=geometry,drawing,places"
                loadingElement={<div style={{ height: `90%` }} />}
                containerElement={<div style={{ height: `100%` }} />}
                mapElement={<div style={{ height: `90%` }} />}
              />
            </Grid>
            <Grid item xs={12} sm={12} md={8}>
              <WetherCard
                name={weather.name}
                main={weather.main}
                weather={weather.weather}
              />
            </Grid>
          </Grid>
        </Grid>
        <Grid item xs={10} sm={10} md={10} className={styles.line}>
          <DaysCard main={fiveWeather} />
        </Grid>
        <Grid item xs={2} sm={2} md={2} className={styles.slider}>
          <Typography variant="h6">The Next {time} Hours </Typography>
          <div className={styles.icon}>
            <AccessTimeFilledIcon />
          </div>

          <Slider
            aria-label="Time"
            defaultValue={3}
            orientation="vertical"
            onChange={(e, value) => setTime(value)}
            getAriaValueText={(val) => val}
            valueLabelDisplay="auto"
            step={3}
            marks
            min={3}
            max={24}
          />
        </Grid>
      </Grid>
    </div>
  );
}
